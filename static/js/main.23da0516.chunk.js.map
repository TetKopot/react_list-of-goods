{"version":3,"sources":["App.tsx","index.tsx"],"names":["ColorModeContext","React","toggleColorMode","MyApp","theme","useTheme","colorMode","Box","sx","display","width","alignItems","justifyContent","bgcolor","color","borderRadius","p","palette","mode","IconButton","ml","onClick","ToggleColorMode","setMode","prevMode","createTheme","Provider","value","ThemeProvider","SortType","goodsFromServer","App","state","isReversed","sortType","NONE","handleSortedAlphabet","setState","ALPHABET","handleSortedLength","LENGTH","handleReverse","handleReset","this","visibleGoods","goods","sort","first","second","localeCompare","Number","length","reverse","console","log","getReorderedGoods","isResetOnPage","className","type","classNames","map","good","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.23da0516.chunk.js","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport IconButton from '@mui/material/IconButton';\nimport Box from '@mui/material/Box';\nimport { useTheme, ThemeProvider, createTheme } from '@mui/material/styles';\nimport Brightness4Icon from '@mui/icons-material/Brightness4';\nimport Brightness7Icon from '@mui/icons-material/Brightness7';\n\nconst ColorModeContext = React.createContext({ toggleColorMode: () => {} });\n\nfunction MyApp() {\n  const theme = useTheme();\n  const colorMode = React.useContext(ColorModeContext);\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        width: '100%',\n        alignItems: 'center',\n        justifyContent: 'center',\n        bgcolor: 'background.default',\n        color: 'text.primary',\n        borderRadius: 1,\n        p: 3,\n      }}\n    >\n      {theme.palette.mode}\n      mode\n      <IconButton\n        sx={{ ml: 1 }}\n        onClick={colorMode.toggleColorMode}\n        color=\"inherit\"\n      >\n        {theme.palette.mode === 'dark'\n          ? <Brightness7Icon /> : <Brightness4Icon />}\n      </IconButton>\n    </Box>\n  );\n}\n\nexport default function ToggleColorMode() {\n  const [mode, setMode] = React.useState<'light' | 'dark'>('light');\n  const colorMode = React.useMemo(\n    () => ({\n      toggleColorMode: () => {\n        setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\n      },\n    }),\n    [],\n  );\n\n  const theme = React.useMemo(() => createTheme({\n    palette: {\n      mode,\n    },\n  }),\n  [mode]);\n\n  return (\n    <ColorModeContext.Provider value={colorMode}>\n      <ThemeProvider theme={theme}>\n        <MyApp />\n      </ThemeProvider>\n    </ColorModeContext.Provider>\n  );\n}\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((first, second) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return first.localeCompare(second);\n\n      case SortType.LENGTH:\n        return Number(first.length) - Number(second.length);\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  // Sort and reverse goods if needed\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  return visibleGoods;\n}\n\ntype State = {\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport class App extends React.Component<{}, State> {\n  state: Readonly<State> = {\n    isReversed: false,\n    sortType: SortType.NONE,\n  };\n\n  handleSortedAlphabet = () => {\n    this.setState({\n      sortType: SortType.ALPHABET,\n    });\n  };\n\n  handleSortedLength = () => {\n    this.setState({\n      sortType: SortType.LENGTH,\n    });\n  };\n\n  handleReverse = () => {\n    this.setState(state => ({\n      isReversed: !state.isReversed,\n    }));\n  };\n\n  handleReset = () => {\n    this.setState({\n      isReversed: false,\n      sortType: SortType.NONE,\n    });\n  };\n\n  render() {\n    const { isReversed, sortType } = this.state;\n    const visibleGoods = getReorderedGoods(goodsFromServer, this.state);\n    const isResetOnPage = isReversed || sortType !== SortType.NONE;\n\n    return (\n\n      <div className=\"section content\">\n        <ToggleColorMode />\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className={classNames(\n              'button is-info',\n              { 'is-light': sortType !== SortType.ALPHABET },\n            )}\n            onClick={this.handleSortedAlphabet}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames(\n              'button is-success',\n              { 'is-light': sortType !== SortType.LENGTH },\n            )}\n            onClick={this.handleSortedLength}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames(\n              'button is-warning',\n              { 'is-light': !isReversed },\n            )}\n            onClick={this.handleReverse}\n          >\n            Reverse\n          </button>\n\n          {isResetOnPage && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={this.handleReset}\n            >\n              Reset\n            </button>\n          )}\n        </div>\n\n        <ul>\n          {visibleGoods.map(good => (\n            <li\n              data-cy=\"Good\"\n              key={good}\n            >\n              {good}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}